import Rodados.*
import dependencia.*

describe "enunciado1" {
	var deportes = new Dependencia()	
	var cultura = new Dependencia()
	
	var cachito = new Corsa(color = rojo)
	
	//deportes y cultura
	var corsaAzul = new Corsa(color = azul)
	var corsaVerde = new Corsa(color = verde)
	var kwidConTanque = new Kwid(tieneTanqueAdicional = true)
	var truenoToyota = new AutoEspecial(capacidad = 5, velocidadMax = 160, peso = 1200, color = beige)
	var kwidSinTanque = new Kwid(tieneTanqueAdicional = false)
	
	
	fixture {
		deportes.empleados(45)
		cultura.empleados(31)
		
		deportes.agregarAFlota(cachito)
		deportes.agregarAFlota(corsaAzul)
		deportes.agregarAFlota(corsaVerde)
		deportes.agregarAFlota(kwidConTanque)
		deportes.agregarAFlota(truenoToyota)
		
		cultura.agregarAFlota(cachito)
		cultura.agregarAFlota(kwidConTanque)
		cultura.agregarAFlota(kwidConTanque)
		cultura.agregarAFlota(kwidSinTanque)
		cultura.agregarAFlota(trafic)
		trafic.interior(interiorPopular)
		trafic.motor(motorPulenta)
	}
	test "deportes" {
		assert.equals(6450, deportes.pesoTotalFlota())
		assert.that(deportes.estaBienEquipada())
		assert.equals(7, deportes.capacidadTotalEnColor(azul))
		assert.equals(beige, deportes.colorDelRodadoMasRapido())
		assert.that(deportes.esGrande())
		assert.equals(25, deportes.capacidadFaltante())
	}
	test "cultura" {
		assert.equals(11000, cultura.pesoTotalFlota())
		assert.that(cultura.estaBienEquipada())
		assert.equals(10, cultura.capacidadTotalEnColor(azul))
		assert.equals(rojo, cultura.colorDelRodadoMasRapido())		
		assert.notThat(cultura.esGrande())
		assert.equals(5, cultura.capacidadFaltante())
	}	
}	